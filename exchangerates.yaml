apiVersion: app.aispec.org/v1alpha1
kind: AIApp
metadata:
  name: Exchange rates
spec:
  assistants:
    - model: meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo
      type: text
      # Tests for this assistant
      tests:
      - name: check usd to gbp rate
        steps:
          - prompt: what is the usd to gbp exchange rate?
            expected_output: the usd to gbp exchange rate. it's ok if it includes additional information such as the rate being based on the latest data.
      - name: usdgbp
        steps:
          - prompt: usdgbp
            expected_output: the usd to gbp exchange rate only. it should specifically mention both usd and gbp and not other currencies. if it mentions other currencies, FAIL the test. it's ok if it shows the gbp to usd rate instead.

      apis:
        - name: Exchange Rates API
          description: Get latest currency exchange rates
          schema: |-
            openapi: 3.0.0
            info:
              title: Exchange Rates API
              description: Get latest currency exchange rates
              version: "1.0.0"
            servers:
              - url: https://open.er-api.com/v6
            paths:
              /latest/{currency}:
                get:
                  operationId: getExchangeRates
                  summary: Get latest exchange rates
                  description: Get current exchange rates for a base currency
                  parameters:
                    - name: currency
                      in: path
                      required: true
                      description: Base currency code (e.g., USD, EUR, GBP)
                      schema:
                        type: string
                  responses:
                    '200':
                      description: Successful response with exchange rates
                      content:
                        application/json:
                          schema:
                            type: object
                            properties:
                              result:
                                type: string
                                example: "success"
                              provider:
                                type: string
                                example: "Open Exchange Rates"
                              base_code:
                                type: string
                                example: "USD"
                              time_last_update_utc:
                                type: string
                                example: "2024-01-19 00:00:01"
                              rates:
                                type: object
                                properties:
                                  EUR:
                                    type: number
                                    example: 0.91815
                                  GBP:
                                    type: number
                                    example: 0.78543
                                  JPY:
                                    type: number
                                    example: 148.192
                                  AUD:
                                    type: number
                                    example: 1.51234
                                  CAD:
                                    type: number
                                    example: 1.34521
          url: https://open.er-api.com/v6
          request_prep_template: |
            Your output must be a valid json, without any commentary or additional formatting.

            Examples:

            **User Input:** Get project prj_1234 details
            **OpenAPI schema path:** /projects/{projectId}
            **Verdict:** response should be

            ```json
            {
              "projectId": "prj_1234"
            }
            ```

            **User Input:** What job is Marcus applying for?
            **OpenAPI schema path:** /jobvacancies/v1/list
            **OpenAPI schema parameters:** [
              {
                "in": "query",
                "name": "candidate_name",
                "schema": {
                  "type": "string"
                },
                "required": false,
                "description": "Filter vacancies by candidate name"
              }
            ]
            **Verdict:** response should be:

            ```json
            {
              "candidate_name": "Marcus"
            }
            ```

            **User Input:** List all users with status "active"
            **OpenAPI schema path:** /users/findByStatus
            **OpenAPI schema parameters:** [
              {
                "name": "status",
                "in": "query",
                "description": "Status values that need to be considered for filter",
                "required": true,
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": ["active", "pending", "sold"],
                  "default": "active"
                }
              }
            ]
            **Verdict:** response should be:

            ```json
            {
              "status": "active"
            }
            ```

            **Response Format:** Always respond with JSON without any commentary, wrapped in markdown json tags, for example:
            ```json
            {
              "parameterName": "parameterValue",
              "parameterName2": "parameterValue2"
            }
            ```

            ===END EXAMPLES===

            OpenAPI schema:

            {{.Schema}}

            ===END OPENAPI SCHEMA===

            Based on conversation below, construct a valid JSON object. In cases where user input does not contain information for a query, DO NOT add that specific query parameter to the output. If a user doesn't provide a required parameter, use sensible defaults for required params, and leave optional params out. Do not pass parameters as null, instead just don't include them.
            ONLY use search parameters from the user messages below - do NOT use search parameters provided in the examples.

          response_success_template: |
            Present the key information in a concise manner and perform any actions requested by the user.
            Include relevant details, references, and links if present. Format the summary in Markdown for clarity and readability where appropriate, but don't mention formatting in your response unless it's relevant to the user's query.
            Make sure to NEVER mention technical terms like "APIs, JSON, Request, etc..." and use first person pronoun (say it as if you performed the action)


          response_error_template: |
            As an AI chat assistant, your job is to help the user understand and resolve API error messages.
            When offering solutions, You will clarify without going into unnecessary detail. You must respond in less than 100 words.
            You should commence by saying "An error occurred while trying to process your request ..." also, if you think it's auth error, ask the user to read this doc https://docs.helix.ml/helix/develop/helix-tools/ (format as markdown)
